import reflex as rx
from datetime import datetime, timedelta
from typing import List, Dict
import sqlite3
import functools


"""Database"""


db_conn = sqlite3.connect('to_do_db3.sqlite')
db_cursor = db_conn.cursor()
db_cursor.execute("""CREATE TABLE IF NOT EXISTS tasks_table (
                task_name text,
                start_time text,
                end_time text,
                is_done integer)""") 
               
     
db_conn.commit()
db_conn.close()




"""Class"""

class State(rx.State):
   
    show: bool = False
    


    def task_not_deleted_upon_request(self):
        self.show = not (self.show)


    def task_deleted_upon_request(self):
        self.show = not (self.show)
        return(rx.window_alert("Task Deleted"))
        # SQL to delete task item from DB
        


    
    days_of_week: List[str] = [
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday",
        "Sunday"]

    
    selected_day: str = "Monday"

    
    lists_tasks: List[str] = [""]

    
    
    """Day Selector"""

     
    def day_selector (self, new_selected_day):

        self.selected_day = new_selected_day
        
    # Get today's date at midnight
        today_midnight = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        
        # Calculate the start of the week (Monday) from midnight
        start_of_week = today_midnight - timedelta(days=today_midnight.weekday())
        
        # Create a dictionary to hold the start and end datetime of each day
        week_dates = {}

        for i in range(7):
            # Calculate the start and end datetime for each day
            day = start_of_week + timedelta(days=i)
            start_of_day = datetime(day.year, day.month, day.day, 0, 0, 0)
            end_of_day = datetime(day.year, day.month, day.day, 23, 59, 59)
            
            # Map day name to its start and end datetime
            week_dates[day.strftime("%A")] = (start_of_day, end_of_day)

        (start_datetime, end_datetime) = week_dates[new_selected_day]
        db_conn = sqlite3.connect('to_do_db2.sqlite')
        db_cursor = db_conn.cursor()
        db_cursor.execute("""SELECT * FROM tasks_table WHERE end_time >= ? AND start_time <= ?""", 
                          (start_datetime, end_datetime))
        day_tasks = db_cursor.fetchall()
        db_conn.close()
        self.lists_tasks.clear()
        for row in day_tasks:
            task_name = row[0]
            start_time = datetime.strptime(row[1], "%Y-%m-%dT%H:%M").strftime("%H:%M").replace(' 0', ' ')
            end_time = datetime.strptime(row[2], "%Y-%m-%dT%H:%M").strftime("%H:%M %#d %B").replace(' 0', ' ')
            display_string = f"{task_name}: {start_time} - {end_time}"
            self.lists_tasks.append(display_string)
        print(str(day_tasks))

    # def handle_task_completion_toggle(self, row_id is_checked):
    #     print("it's done!")
    #     print(repr(is_checked))

    def handle_task_completion_toggle(self, is_checked):
        print("it's done!")
        print(repr(is_checked))

    
    
    """Create New Task"""

    new_task_name_text: str

    new_task_start_time: str

    new_task_end_time: str 

    
    def add_task_to_db(self):
        db_conn = sqlite3.connect('to_do_db2.sqlite')
        db_cursor = db_conn.cursor()
        db_cursor.execute("""INSERT INTO tasks_table VALUES (?,?,?)""", 
                          (self.new_task_name_text, self.new_task_start_time, self.new_task_end_time))
        db_conn.commit()
        db_conn.close()
        self.count_rows()
        print("task done")

    def count_rows(self):
        db_conn = sqlite3.connect('to_do_db2.sqlite')
        db_cursor = db_conn.cursor()
        db_cursor.execute("""SELECT COUNT(*) FROM tasks_table""")
        row = db_cursor.fetchone()
        count = row[0]
        db_conn.commit()
        db_conn.close()
        print(str(count))

 

"""Functions"""


"""Days of Week"""


def day_of_week_button(day_name: str):
    return rx.button(
                day_name,
                bg="#9cd1f3",
                color="black",
                width="7.5em",          
                size="lg",
                on_click=State.day_selector(day_name))

                
def task_line_item(task_line: str):
    return rx.hstack(
        # rx.text(task_line, font_size="3em"),
        rx.checkbox(task_line,
                    color_scheme="red", 
                    size="lg",
                    on_change=State.handle_task_completion_toggle,
            ),
        rx.icon(tag="delete", 
                on_click=State.task_not_deleted_upon_request),
        rx.modal(
            rx.modal_overlay(
                rx.modal_content(
                    rx.modal_header("Delete Task"),
                    rx.modal_body(
                        "Are you sure you want to delete this item?"
                    ),
                    rx.modal_footer(
                        rx.button("Yes", on_click=State.task_deleted_upon_request),
                        rx.button("No", on_click=State.task_not_deleted_upon_request)))),
            is_open=State.show))



"""Page Layout"""

def index() -> rx.Component:
    return rx.fragment(

        rx.box(
            rx.color_mode_button(
                rx.color_mode_icon(), 
                float="right",
                margin_right="30px",
                margin_top="25px"
                ),

            rx.text("light / dark mode", 
                float="right", 
                margin_right="10px",
                margin_top="32px")),

        rx.container(
            rx.vstack(
                rx.box(
                    rx.popover(
                        rx.popover_trigger
                            (rx.image(src="/todoicon.png",
                             padding_top="55%", 
                             width="125px",
                             on_double_click=rx.redirect(
                                "https://reflex.dev/docs/getting-started/introduction/",
                                external=True))),
                    rx.popover_content(
                    rx.popover_header("This is my first app made with Reflex. Double click the icon to find out more")))))),
                    
                

        rx.vstack(
            
            rx.heading("Lucy's Fancy To-Do List", 
                       margin="40px",
                       font_family="Pixelify Sans",
                       font_size="400%"),
            
            rx.divider(border_color="skyblue", 
                       width="75%", 
                       border_width="medium"),
                       
            rx.spacer(),
            rx.spacer(),
            rx.spacer(),
            rx.spacer(),
            rx.spacer(),
            rx.spacer(),
            rx.spacer(),

            rx.hstack(
            rx.input(on_change=State.set_new_task_name_text,
                    placeholder="Name of Task",
                    type_="text",
                    border_width="medium", 
                    border_color="white",
                    width="12em"),
                
            rx.input(on_change=State.set_new_task_start_time,
                    placeholder="Start Time",
                    type_="datetime-local",
                    border_width="medium", 
                    border_color="white",
                    width="12em"),

            rx.input(on_change=State.set_new_task_end_time,
                    placeholder="End Time",
                    type_="datetime-local",
                    border_width="medium", 
                    border_color="white",
                    width="12em"),

            rx.icon(
                    tag="arrow_left", 
                    width="2em", 
                    color="coral"),

            rx.button("Create New Task",
                      on_click=State.add_task_to_db,
                       width="12em", 
                       color="black", 
                       bg="#9cd1f3")), 
                
            rx.spacer(),
            rx.spacer(),
            rx.spacer(),
            rx.spacer(),
            rx.spacer(),
            rx.spacer(),
            rx.spacer(),
            
            rx.hstack(
                rx.foreach(State.days_of_week, day_of_week_button)),

            rx.spacer(),
            rx.spacer(),
            rx.spacer(),
            rx.spacer(),
            rx.spacer(),
            
            rx.heading(State.selected_day, 
                       font_family="Pixelify Sans", 
                       font_size="5em"),
            rx.spacer(),
            rx.spacer(),
            rx.spacer(),
            rx.vstack(
                rx.foreach(State.lists_tasks, task_line_item)),
            

            rx.spacer(),
            rx.spacer()),

        
            spacing="12em",
            padding_top="2%")


    
app = rx.App(stylesheets=["https://fonts.googleapis.com/css2?family=Pixelify+Sans:wght@400;700&display=swap"],)
app.add_page(index)
app.compile()




